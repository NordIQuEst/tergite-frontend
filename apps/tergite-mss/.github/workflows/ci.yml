name: CI

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.8" ]

    services:
      mongodb:
        image: mongo
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand("ping").ok' | mongosh --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --name mongo_container

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Run tests
        run: |
          pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          black --check .
          pytest

  release-staging:
    name: Release Staging
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') && vars.SHOULD_PUBLISH_TO_STAGING == 'true' }}
    needs: tests
    steps:
      - name: Checkout the commit
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to staging registry
        uses: docker/login-action@v3
        with:
          # using the self-hosted container registry provided by https://github.com/tergite/tergite-registry
          # its domain is saved in STAGING_CONTAINER_REGISTRY workspace secret variable in format domain.com:port
          # STAGING_DOCKER_USERNAME and STAGING_DOCKER_PASSWORD are also workspace secret variables
          registry: ${{ secrets.STAGING_CONTAINER_REGISTRY }}
          username: ${{ secrets.STAGING_DOCKER_USERNAME }}
          password: ${{ secrets.STAGING_DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.STAGING_CONTAINER_REGISTRY }}/${{ github.event.repository.name }}:${{ github.ref_name }}

  release-production:
    name: Release Production
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') && vars.SHOULD_PUBLISH_TO_PROD == 'true' }}
    needs: tests
    steps:
      - name: Checkout the commit
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to staging registry
        uses: docker/login-action@v3
        with:
          # using the self-hosted container registry provided by https://github.com/tergite/tergite-registry
          # its domain is saved in CONTAINER_REGISTRY workspace secret variable in format domain.com:port
          # STAGING_DOCKER_USERNAME and DOCKER_PASSWORD are also workspace secret variables
          registry: ${{ secrets.CONTAINER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.CONTAINER_REGISTRY }}/${{ github.event.repository.name }}:${{ github.ref_name }}

  upstream:
    name: Update upstream
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }} && ${{ vars.SHOULD_PUSH_UPSTREAM == 'true' }}
    needs: tests
    steps:
      - name: Checkout the commit
        uses: actions/checkout@v4

      - name: Push upstream
        run: |
          git config user.email ${{ secrets.UPSTREAM_USER }}
          git pull -r ${{ secrets.UPSTREAM_REPO }} ${{ github.ref_name }} || echo "${{ github.ref_name }} does not exist"
          git push ${{ secrets.UPSTREAM_REPO }} ${{ github.ref_name }} || echo "${{ github.ref_name }} already exists"
