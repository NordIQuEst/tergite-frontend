name: Landing Page CI

on:
  push:
    branches:
      - main
    tags:
      - "v*"
    paths:
      - "apps/tergite-landing-page/**"
  pull_request:
    paths:
      - "apps/tergite-landing-page/**"

jobs:
  tests:
    runs-on: ubuntu-latest
    container:
      image: cypress/browsers:node18.12.0-chrome107
      options: --user 1001
    strategy:
      matrix:
        node-version: ["18.16", "18.17", "18.18", "18.19"]

    steps:
      - uses: actions/checkout@v4
      - name: Set up Nodejs ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Lint and test
        run: |
          cd apps/tergite-landing-page
          npm ci
          npm run lint
          npm run e2e

  build:
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    needs: tests
    steps:
      - uses: actions/checkout@v4
      - name: Set up Nodejs 18.16
        uses: actions/setup-node@v4
        with:
          node-version: "18.16"
      - name: build nextjs app
        run: |
          cd apps/tergite-landing-page
          npm ci
          NEXT_TELEMETRY_DISABLED=1 npm run build
      - name: archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tergite-landing-page-dist
          path: ./apps/tergite-landing-page/.next

  release-staging:
    name: Release Staging
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') && vars.SHOULD_PUBLISH_TO_STAGING == 'true' }}
    needs: build
    steps:
      - name: Checkout the commit
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to staging registry
        uses: docker/login-action@v3
        with:
          # using the self-hosted container registry provided by https://github.com/tergite/tergite-registry
          # its domain is saved in STAGING_CONTAINER_REGISTRY workspace secret variable in format domain.com:port
          # STAGING_DOCKER_USERNAME and STAGING_DOCKER_PASSWORD are also workspace secret variables
          registry: ${{ secrets.STAGING_CONTAINER_REGISTRY }}
          username: ${{ secrets.STAGING_DOCKER_USERNAME }}
          password: ${{ secrets.STAGING_DOCKER_PASSWORD }}

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: tergite-landing-page-dist
          path: ./apps/tergite-landing-page/.next

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./apps/tergite-landing-page
          file: ./apps/tergite-landing-page/Dockerfile
          push: true
          tags: ${{ secrets.STAGING_CONTAINER_REGISTRY }}/tergite-landing-page:${{ github.ref_name }}

  release-production:
    name: Release Production
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') && vars.SHOULD_PUBLISH_TO_PROD == 'true' }}
    needs: build
    steps:
      - name: Checkout the commit
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to staging registry
        uses: docker/login-action@v3
        with:
          # using the self-hosted container registry provided by https://github.com/tergite/tergite-registry
          # its domain is saved in CONTAINER_REGISTRY workspace secret variable in format domain.com:port
          # STAGING_DOCKER_USERNAME and DOCKER_PASSWORD are also workspace secret variables
          registry: ${{ secrets.CONTAINER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: tergite-landing-page-dist
          path: ./apps/tergite-landing-page/.next

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./apps/tergite-landing-page
          file: ./apps/tergite-landing-page/Dockerfile
          push: true
          tags: ${{ secrets.CONTAINER_REGISTRY }}/tergite-landing-page:${{ github.ref_name }}

  upstream:
    name: Update upstream
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }} && ${{ vars.SHOULD_PUSH_UPSTREAM == 'true' }}
    needs: tests
    steps:
      - name: Checkout the commit
        uses: actions/checkout@v4

      - name: Push upstream
        run: |
          git config user.email ${{ secrets.UPSTREAM_USER }}
          git pull -r ${{ secrets.UPSTREAM_REPO }} ${{ github.ref_name }} || echo "${{ github.ref_name }} does not exist"
          git push ${{ secrets.UPSTREAM_REPO }} ${{ github.ref_name }} || echo "${{ github.ref_name }} already exists"
