# Original source is tergite-mss
[general]
# turn auth OFF or ON, default=true
is_enabled = true
# Secret for signing JWT tokens. https://jwt.io/introduction
jwt_secret = "some hidden secret"
# Time-to-live for the JWT tokens created by this app, default=3600
jwt_ttl = 3600
# domain to be set in the cookie, to limit its use to only that domain.
# https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies
cookie_domain = "some.domain.com"
# name of the cookie to be used when authenticating
cookie_name = "tergiteauth"

# Add clients in the form: Note: [[...]] creates an array of tables
[[clients]]
name = "name as will appear in url qal9000.se/auth/{name}/ e.g. 'github' as in qal9000.se/auth/chalmers/"
# Note that for Oauth2, you need an external Oauth2 provider like Github, Google, Chalmers, Puhuri etc.
# You must thus register an app with that provider and in return, they should give you
# a CLIENT_ID, CLIENT_SECRET and optionally if using OpenID Connect, an OPENID_CONFIGURATION_ENDPOINT
# For GitHub, see See https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps
# For Chalmers (microsoft), see See https://learn.microsoft.com/en-us/azure/active-directory/develop/quickstart-web-app-python-sign-in?tabs=windows
# For Puhuri (openID), register an application at https://webapp.prod.puhuri.eduteams.org/sp_request
client_id = "some client id got from the oauth2 provider"
client_secret = "some client secret got from the oauth2 provider"
# The callback URL that the Oauth2 provider should redirect to after authentication.
# THIS IS A URL ON THIS APPLICATION and it is usually of the form:
# https://example.com/auth/app/{name-of-client-e.g.-github}/callback
redirect_url = "http://127.0.0.1:8002/auth/app/chalmers/callback"
# There are a couple of client types basing on the User Management software used by the company
# e.g. many companies manage their users using microsoft active directory, other use GSuite, others Okta
# and others just use OpenID connect to handle their authentication
# The possible client_types include: 'microsoft', 'google', 'github', 'okta', 'openid'. Note the spelling and the case.
client_type = "okta"
# the Regular expression for the emails that are allowed to sign into this application
# using this Oauth2 method. For example, if I set up a GitHub client, I may not want every GitHub user
# to access this application so I use "^(john\\.doe|jane|aggrey)@example\\.com$"
# to allow only john.doe@example.com, jane@example.com and aggrey@example.com to login via this method
# default = ".*"
email_regex = ".*"
# The set of roles every user who logs in via this method should get.
# Possible roles include: "admin", "user", "researcher", "partner". Default is 'user'
roles = ["user"]
# etc
# other client-type specific key-word arguments e.g. OpenID requires a openid_configuration_endpoint
# openid_configuration_endpoint = "https://example.com/.well-known/openid-configuration"
# You might need to check their initialization arguments in the `httpx_oauth.clients` module.


# Add as many clients as you wish to have
[[clients]]
name = "github"
client_id = "some-github-obtained-client-id"
client_secret = "some-github-obtained-client-secret"
redirect_url = "http://127.0.0.1:8002/auth/app/github/callback"
client_type = "github"
email_regex = "^(john\\.doe|jane|aggrey)@example\\.com$"
roles = ["admin", "user"]

[[clients]]
name = "puhuri"
client_id = "some-puhuri-obtained-client-id"
client_secret = "some-puhuri-obtained-client-secret"
redirect_url = "http://127.0.0.1:8002/auth/app/puhuri/callback"
client_type = "openid"
email_regex = "^(john\\.doe|jane)@example\\.com$"
roles = ["user"]
openid_configuration_endpoint = "https://proxy.acc.puhuri.eduteams.org/.well-known/openid-configuration"
